{{- if lt 1 ($.Values.mongodb_shard.replicas | int) }}
{{- range $i, $e := $.Values.mongodb_shard.nodeList }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "mongodb-shard-master-statefulset-%d" $i }}
  labels:
    app: "mongodb-shard-master"
    release: "{{ $.Release.Name }}"
spec:
  serviceName: "mongodb-shard-master-service"
  replicas: 1
  selector:
    matchLabels:
      app: "mongodb-shard-master"
      release: "{{ $.Release.Name }}"
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "mongodb-shard-master"
        release: "{{ $.Release.Name }}"
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - {{$e}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: "mongodb-shard-master"
              topologyKey: kubernetes.io/hostname
      containers:
      - name: mongodb-shard-master
        image: "{{ $.Values.image }}:{{ $.Values.imageTag }}"
        imagePullPolicy: IfNotPresent
        command: ['/bin/bash', '-c', '/bin/bash /run.sh']
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        livenessProbe:
          exec:
            command:
              - /mongodb/bin/mongo
              - 127.0.0.1:{{ $.Values.mongodb_shard.port }}
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 60
          failureThreshold: 8
          successThreshold: 1
        volumeMounts:
          - name: ro
            mountPath: /etc/localtime:ro
          - name: data
            mountPath: /mongodb-shard-master/data
          - name: mongodb-shard-master-configmap
            mountPath: /run.sh
            subPath: run.sh
          - name: mongodb-shard-master-configmap
            mountPath: /mongodb-shard-master/conf/mongod.conf
            subPath: mongod.conf
      volumes:
        - name: ro
          hostPath:
            path: /etc/localtime
        - name: mongodb-shard-master-configmap
          configMap:
            name: mongodb-shard-master-configmap
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: "local-path"
---
{{- if $.Values.mongodb_shard.slave.enable }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "mongodb-shard-slave-statefulset-%d" $i }}
  labels:
    app: "mongodb-shard-slave"
    release: "{{ $.Release.Name }}"
spec:
  serviceName: "mongodb-shard-slave-service"
  replicas: 1
  selector:
    matchLabels:
      app: "mongodb-shard-slave"
      release: "{{ $.Release.Name }}"
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "mongodb-shard-slave"
        release: "{{ $.Release.Name }}"
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - {{$e}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: "mongodb-shard-slave"
              topologyKey: kubernetes.io/hostname
      containers:
        - name: mongodb-shard-slave
          image: "{{ $.Values.image }}:{{ $.Values.imageTag }}"
          imagePullPolicy: IfNotPresent
          command: ['/bin/bash', '-c', '/bin/bash /run.sh']
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          livenessProbe:
            exec:
              command:
                - /mongodb/bin/mongo
                - 127.0.0.1:{{ $.Values.mongodb_shard.slave.port }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          volumeMounts:
            - name: ro
              mountPath: /etc/localtime:ro
            - name: data
              mountPath: /mongodb-shard-slave/data
            - name: mongodb-shard-slave-configmap
              mountPath: /run.sh
              subPath: run.sh
            - name: mongodb-shard-slave-configmap
              mountPath: /mongodb-shard-slave/conf/mongod.conf
              subPath: mongod.conf
      volumes:
        - name: ro
          hostPath:
            path: /etc/localtime
        - name: mongodb-shard-slave-configmap
          configMap:
            name: mongodb-shard-slave-configmap
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: "local-path"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "mongodb-shard-arbiter-statefulset-%d" $i }}
  labels:
    app: "mongodb-shard-arbiter"
    release: "{{ $.Release.Name }}"
spec:
  serviceName: "mongodb-shard-arbiter-service"
  replicas: 1
  selector:
    matchLabels:
      app: "mongodb-shard-arbiter"
      release: "{{ $.Release.Name }}"
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "mongodb-shard-arbiter"
        release: "{{ $.Release.Name }}"
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      restartPolicy: Always
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  - {{$e}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: "mongodb-shard-arbiter"
              topologyKey: kubernetes.io/hostname
      containers:
        - name: mongodb-shard-arbiter
          image: "{{ $.Values.image }}:{{ $.Values.imageTag }}"
          imagePullPolicy: IfNotPresent
          command: ['/bin/bash', '-c', '/bin/bash /run.sh']
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          livenessProbe:
            exec:
              command:
                - /mongodb/bin/mongo
                - 127.0.0.1:{{ $.Values.mongodb_shard.slave.arbiter.port }}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 60
            failureThreshold: 8
            successThreshold: 1
          volumeMounts:
            - name: ro
              mountPath: /etc/localtime:ro
            - name: data
              mountPath: /mongodb-shard-arbiter/data
            - name: mongodb-shard-arbiter-configmap
              mountPath: /run.sh
              subPath: run.sh
            - name: mongodb-shard-arbiter-configmap
              mountPath: /mongodb-shard-arbiter/conf/mongod.conf
              subPath: mongod.conf
      volumes:
        - name: ro
          hostPath:
            path: /etc/localtime
        - name: mongodb-shard-arbiter-configmap
          configMap:
            name: mongodb-shard-arbiter-configmap
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
        storageClassName: "local-path"
---
{{- end }}
{{- end }}
{{- end }}
