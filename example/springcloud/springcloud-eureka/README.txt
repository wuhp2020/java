一. eureka注册中心原理
1.服务注册:
eureka客户端会通过发送rest请求的方式向eureka服务端注册自身元数据:ip地址, 端口,
运行状况等信息, 服务端会把注册信息存储在一个双层map中

2.服务续约:
eureka客户端每30秒发送一次心跳来续约, 告知客户端正常, 如果eureka服务端90秒没收到心跳, 则将其从注册表删除

3.获取注册表信息:
客户端通过rest请求从服务端获取注册表信息, 缓存在本地, 服务调用的时候, 会从注册表查找其它服务, 每30秒更新一次

4.服务调用
客户端获取到服务清单后, 就可以从中查找其它服务地址进行远程调用, 会通过ribbon自动进行负载均衡

5.eureka高可用:服务同步
配置eureka集群, 服务之间会相互注册, 客户端的注册信息和续约信息被复制到集群中的所有节点,
只要有一个节点活着都可以发挥注册中心的作用

6.服务剔除
eureka服务启动的时候创建一个定时任务, 每60秒从当前服务清单中剔除续约超时的(90秒)

7.自我保护机制
默认情况下如果, Eureka Server 在一定的 90s 内没有接收到某个微服务实例的心跳, 会注销该实例.
但是在微服务架构下服务之间通常都是跨进程调用, 网络通信往往会面临着各种问题, 比如微服务状态正常,
网络分区故障, 导致此实例被注销. 固定时间内大量实例被注销, 可能会严重威胁整个微服务架构的可用性.
为了解决这个问题, Eureka 开发了自我保护机制, 那么什么是自我保护机制呢?
Eureka Server 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%, 如果低于 85%, Eureka Server 即会进入自我保护机制.
Eureka Server 进入自我保护机制, 会出现以下几种情况:
(1) Eureka 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务
(2) Eureka 仍然能够接受新服务的注册和查询请求, 但是不会被同步到其它节点上(即保证当前节点依然可用)
(3) 当网络稳定时, 当前实例新的注册信息会被同步到其它节点中
Eureka 自我保护机制是为了防止误杀服务而提供的一个机制. 当个别客户端出现心跳失联时, 则认为是客户端的问题, 剔除掉客户端.
当 Eureka 捕获到大量的心跳失败时, 则认为可能是网络问题, 进入自我保护机制, 当客户端心跳恢复时, Eureka 会自动退出自我保护机制.
如果在保护期内刚好这个服务提供者非正常下线了, 此时服务消费者就会拿到一个无效的服务实例, 即会调用失败.
对于这个问题需要服务消费者端要有一些容错机制, 如重试, 断路器等.
通过在 Eureka Server 配置如下参数, 开启或者关闭保护机制, 生产环境建议打开:
eureka.server.enable-self-preservation=true

8.eureka客户端注册实例为什么这么慢:
(1)默认设置了延时40秒
(2)eureka服务端维护每30秒更新响应缓存
(3)客户端每30秒更新缓存
(4)ribbon从本地获取服务列表时, 本身也维护一个缓存, 30秒刷新一次

#####################################

Eureka 集群原理
Eureka Server 集群相互之间通过 Replicate 来同步数据, 相互之间不区分主节点和从节点, 所有的节点都是平等的.
在这种架构中, 节点通过彼此互相注册来提高可用性, 每个节点需要添加一个或多个有效的 serviceUrl 指向其他节点.

如果某台 Eureka Server 宕机, Eureka Client 的请求会自动切换到新的 Eureka Server 节点.
当宕机的服务器重新恢复后, Eureka 会再次将其纳入到服务器集群管理之中, 当节点开始接受客户端请求时,
所有的操作都会进行节点间复制, 将请求复制到其它 Eureka Server 当前所知的所有节点中.

另外 Eureka Server 的同步遵循着一个非常简单的原则:
只要有一条边将节点连接, 就可以进行信息传播与同步. 所以, 如果存在多个节点, 只需要将节点之间两两连接起来形成通路,
那么其它注册中心都可以共享信息, 每个 Eureka Server 同时也是 Eureka Client,
多个 Eureka Server 之间通过 P2P 的方式完成服务注册表的同步.

Eureka Server 集群之间的状态是采用异步方式同步的, 所以不保证节点间的状态一定是一致的, 不过基本能保证最终状态是一致的.

Eureka 分区
Eureka 提供了 Region 和 Zone 两个概念来进行分区, 这两个概念均来自于亚马逊的 AWS:
region: 可以理解为地理上的不同区域, 比如亚洲地区, 中国区或者深圳等等, 没有具体大小的限制,
根据项目具体的情况, 可以自行合理划分 region.
zone: 可以简单理解为 region 内的具体机房, 比如说 region 划分为深圳, 然后深圳有两个机房,
就可以在此 region 之下划分出 zone1、zone2 两个 zone.

Eurka 保证 AP
Eureka Server 各个节点都是平等的, 几个节点挂掉不会影响正常节点的工作,
剩余的节点依然可以提供注册和查询服务, 而 Eureka Client 在向某个 Eureka 注册时,
如果发现连接失败, 则会自动切换至其它节点, 只要有一台 Eureka Server 还在, 就能保证注册服务可用(保证可用性),
只不过查到的信息可能不是最新的(不保证强一致性).
