server.port=8008

# 配置Sharding-JDBC的分片策略
# 配置数据源, 给数据源起名db0,db1...此处可配置多数据源
spring.shardingsphere.datasource.names=db0,db1

# 配置允许一个实体类映射多张表
spring.main.allow-bean-definition-overriding=true

# 配置数据源具体内容, 包含: 连接池、驱动、地址、用户名、密码
spring.shardingsphere.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.db0.url=jdbc:mysql://192.168.221.129:3306/a?useUnicode=true&characterEncoding=utf-8
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=123

# 配置数据源具体内容, 包含: 连接池、驱动、地址、用户名、密码
spring.shardingsphere.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.db1.url=jdbc:mysql://192.168.221.129:3306/b?useUnicode=true&characterEncoding=utf-8
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=123

# 配置数据库的分布, 表的分布
spring.shardingsphere.sharding.tables.freeman.actual-data-nodes=db$->{0..1}.freeman_$->{0..1}

# 指定freeman表 主键id 生成策略为 SNOWFLAKE
spring.shardingsphere.sharding.tables.freeman.key-generator.column=id
spring.shardingsphere.sharding.tables.freeman.key-generator.type=SNOWFLAKE

# 指定数据库分片策略
spring.shardingsphere.sharding.tables.freeman.database-strategy.standard.sharding-column=id
spring.shardingsphere.sharding.tables.freeman.database-strategy.standard.precise-algorithm-class-name=com.spring.config.PreciseShardingAlgorithmConfig

# 指定表分片策略, 约定id值是偶数添加到freeman_0表, 如果id是奇数添加到freeman_1表
spring.shardingsphere.sharding.tables.freeman.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.freeman.table-strategy.inline.algorithm-expression=freeman_$->{id % 2}


# 打开sql输出日志
spring.shardingsphere.props.sql.show=false
